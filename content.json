{"meta":{"title":"个人博客","subtitle":"","description":"","author":"晓江","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2021-08-05T08:50:30.139Z","updated":"2021-08-05T08:50:26.010Z","comments":true,"path":"faqs/index.html","permalink":"http://example.com/faqs/index.html","excerpt":"","text":""},{"title":"","date":"2021-08-05T08:49:05.055Z","updated":"2021-08-05T08:48:09.049Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2021-08-05T08:49:37.940Z","updated":"2021-08-05T08:49:32.741Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-08-05T08:53:24.670Z","updated":"2021-08-05T08:53:20.624Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"日常记录","slug":"日常记录","date":"2021-08-05T09:10:47.000Z","updated":"2021-08-05T09:13:56.113Z","comments":true,"path":"2021/08/05/日常记录/","link":"","permalink":"http://example.com/2021/08/05/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/","excerpt":"","text":"1、日常记录1、调整桌面图标间距 按 ctrl + r ，然后输入regedit， 打开注册表 分别双击调整水平和垂直间距 然后完成之后重启电脑，重新加载注册表才可以看到调整后的效果 2、gitee生成公钥 在git窗口输入指令 1ssh-keygen 然后按三下回车即可 然后进入对应的文件中查看公钥 1C:\\Users\\12562\\.ssh 3、配置环境变量 Java环境 12345JAVA_HOMEC:\\Program Files\\Java\\jdk1.8.0_301Path.;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin Maven环境 12345678M2_HOMED:\\Program Files\\Maven\\apache-maven-3.8.1-bin\\apache-maven-3.8.1\\binMAVEN_HOMED:\\Program Files\\Maven\\apache-maven-3.8.1-bin\\apache-maven-3.8.1Path%MAVEN_HOME%\\bin 2、项目信息1、代码仓库 阿里云仓库平台：https://devops.aliyun.com/organization/5fb25659e89148238ce80ead 克隆方法：使用网站上分配的账号和自己设置的密码进行克隆 我的账号：44400593735388170 2、项目分析 文件说明： 通用包common下面的内容，一般用作工具开发 而modules层作为模块层，下面包含多个模块的内容，而每个模块又可以分为biz（业务层，实现逻辑代码）、dao（数据访问层）、po（实体层）、webservice（控制层） 最后的third包作为第三方包，主要用来连接第三方软件 3、账号管理 连接服务器 目前服务器资源分成两类： 云服务器（主要是腾讯云和阿里云） 自建服务器 连接信息如下： 服务器用途 连接IP{:端口} 用户名 密码 内部测试服务器 10.10.11.238 tl 测试云服务器Beta 172.16.3.28:60713 appadmin tl123 业务层服务器01 172.16.3.28:60707 appadmin 业务层服务器02 172.16.3.28:60706 appadmin 接入层服务器N1 172.16.3.28:60704 appadmin 接入层服务器N2 172.16.3.28:60703 appadmin 生产环境Redis 172.16.3.28:60708 appadmin 连接需要的配置文件： 根据用途后面的名字去对应需要的认证文件 连接方法： 1、下载对应的认证文件到本地 2、在连接的时候配置“用户身份验证”，将方法选为“Public Key”，并输入用户名，选择对应的认证文件为密钥，最后输入密码 3、完成之后点击连接即可 连接MySQL数据库 连接信息如下： 数据库用途 IP地址{:端口} 用户名 权限 密码 测试环境 172.16.3.28:3309 developer - AAEnmENpOy2rYpi4 生产环境 172.16.3.28:3307 developer - EJF*YR8MIUe^BD3^ 测试环境 172.16.3.28:3309 reader - 待补充 正式环境 172.16.3.28:3307 reader - 待补充 4、计算机资源 5、正在运行的项目和模块6、运行环境的配置项目运行所需要的环境配置 后端配置 安装JDK，配置环境变量 安装Maven，配置环境变量，配置settings.xml文件（复制以下内容） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;mirror&lt;/id&gt; &lt;mirrorOf&gt;central,jcenter,!rdc-releases,!rdc-snapshots&lt;/mirrorOf&gt; &lt;name&gt;mirror&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;central&lt;/id&gt; &lt;name&gt;Maven Repository Switchboard&lt;/name&gt; &lt;url&gt;https://repo1.maven.org/maven2/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;repo2&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;https://repo2.maven.org/maven2/&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;ibiblio&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;https://mirrors.ibiblio.org/pub/mirrors/maven2/&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;jboss-public-repository-group&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;JBoss Public Repository Group&lt;/name&gt; &lt;url&gt;https://repository.jboss.org/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;!-- 中央仓库在中国的镜像 --&gt; &lt;mirror&gt; &lt;id&gt;maven.net.cn&lt;/id&gt; &lt;name&gt;oneof the central mirrors in china&lt;/name&gt; &lt;url&gt;https://maven.net.cn/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;servers&gt; &lt;server&gt; &lt;!-- 注意修改账号信息 --&gt; &lt;id&gt;rdc-releases&lt;/id&gt; &lt;username&gt;$&#123;username&#125;&lt;/username&gt; &lt;password&gt;$&#123;password&#125;&lt;/password&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;rdc-snapshots&lt;/id&gt; &lt;username&gt;$&#123;username&#125;&lt;/username&gt; &lt;password&gt;$&#123;password&#125;&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;rdc&lt;/id&gt; &lt;properties&gt; &lt;altReleaseDeploymentRepository&gt; rdc-releases::default::https://packages.aliyun.com/maven/repository/2048598-release-Ntlgsw/ &lt;/altReleaseDeploymentRepository&gt; &lt;altSnapshotDeploymentRepository&gt; rdc-snapshots::default::https://packages.aliyun.com/maven/repository/2048598-snapshot-WNq7k3/ &lt;/altSnapshotDeploymentRepository&gt; &lt;/properties&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;central&lt;/id&gt; &lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;jcenter-snapshots&lt;/id&gt; &lt;name&gt;jcenter&lt;/name&gt; &lt;url&gt;https://jcenter.bintray.com/&lt;/url&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;spring&lt;/id&gt; &lt;name&gt;ali mavan spring&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/spring&lt;/url&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;rdc-releases&lt;/id&gt; &lt;url&gt;https://packages.aliyun.com/maven/repository/2048598-release-Ntlgsw/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;rdc-snapshots&lt;/id&gt; &lt;url&gt;https://packages.aliyun.com/maven/repository/2048598-snapshot-WNq7k3/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;central&lt;/id&gt; &lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;rdc-releases&lt;/id&gt; &lt;url&gt;https://packages.aliyun.com/maven/repository/2048598-release-Ntlgsw/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;rdc-snapshots&lt;/id&gt; &lt;url&gt;https://packages.aliyun.com/maven/repository/2048598-snapshot-WNq7k3/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;spring-snapshots&lt;/id&gt; &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;rdc&lt;/activeProfile&gt; &lt;/activeProfiles&gt;&lt;/settings&gt; 在云效仓库中查看账号的信息 安装IDEA，配置上自己安装的Maven，选择JDK版本 克隆后端项目代码，并导入到IDEA中 配置成功之后，效果如下图 前端配置 下载Node.js：https://nodejs.org/en/download/ 下载之后一直点下一步安装即可 拉取项目，安装依赖 执行本地测试 1npm run local 7、项目提交 使用IDEA进行Git提交 拉取最新的代码 提交代码，记得按任务卡片需求，一次提交一个任务的代码，然后添加说明 说明格式如下 简称 全称 用途 todo to do 需要后面进行完成或补充的事情 add add 添加了某某功能或接口 feat feature 增加了某某特性（通常是基于功能或功能之后） up update 更新了结构或者业务逻辑 doc document 增加了文档的描述 fin finish 完成了某某卡片（非常抽象的动作描述，几乎万能） fix fix 修复了某某缺陷 opt optimize 优化了某某功能或接口 rm remove 移除了某某模块或功能或接口或实体等 完成之后点击下方的提交并推送就可以了 如果发现直接点击了commit或者push失败，可以直接点击push进行推送，注意：需要有该仓库的开发者以上权限才可以进行推送 服务器拉取测试 连接base测试服务器 依次执行下方指令 12345# 进入项目文件夹(base) [~]$ cd /usr/local/jweb/jweb_tl_pms/# 执行build.sh文件(base) [/usr/local/jweb/jweb_tl_pms]$ sh build.sh 最后输入账号密码 等待服务器自动拉取最新仓库代码，并自动执行 打开测试环境测试：http://beta.pms.tailiangwx.com/#/dashboard 对本次提交的内容进行测试 查看build.sh 的代码 1234567891011121314151617# 拉取最新代码# git pull https://gitee.com/tailiang/jweb_tl_pms.gitgit pull# 删除30天以前备份文件location=&quot;/data/backup/jweb_pms/&quot;fileName=`date +%Y%m%d%H%M%S`path=&quot;$&#123;location&#125;$&#123;fileName&#125;.jar&quot;# echo &quot;start copy to $&#123;path&#125; !&quot;find $location -mtime +30 -type f |xargs rm -f# 备份.jar文件cp ./target/*.jar $&#123;path&#125;# 打包和重启./mvnw clean package -Dmaven.test.skip=truepm2 restart jweb_tl_pms 3、笔记1、后端内容1、注解的说明 @Repository的作用 @Repository、@Service、@Controller 和 @Component 将类标识为Bean 它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean。具体只需将该注解标注在 DAO类上即可。同时，为了让 Spring 能够扫描类路径中的类并识别出 @Repository 注解 @component的作用 作用：例如我在实现类中用到了@Autowired注解，被注解的这个类是从Spring容器中取出来的，那调用的实现类也需要被Spring容器管理，加上@Component 和@Bean的区别： @Component注解表明一个类会作为组件类，并告知Spring要为这个类创建bean @Bean注解告诉Spring这个方法将会返回一个对象，这个对象要注册为Spring应用上下文中的bean。通常方法体中包含了最终产生bean实例的逻辑 两者的目的是一样的，都是注册bean到Spring容器中 2、Collector和Collectors 示例 12List&lt;PositionConnect&gt; positionConnect = produceBiz.getPositionConnect() .stream().filter(e -&gt; e.getLocationCode().equals(locationCode)).collect(Collectors.toList()); Collector是专门用来作为Stream的collect方法的参数的 而Collectors是作为生产具体Collector的工具类 Collection的集合子类可以使用 stream().filter(flag).collect(Collectors.toList())通过设置 flag 条件进行内容过滤 参考文章：https://www.jianshu.com/p/7eaa0969b424 3、复制对象内容 示例 通过调用 BeanUtils 的 copyProperties 方法，将 warehouse 的内容复制到 vo 中，两者的属性相同，但是 vo 增加了其他方法 12345678List&lt;Warehouse&gt; warehouses = warehouseBiz.getWarehouseIncludeVirtual();List&lt;WarehouseVo&gt; warehouseVos = new ArrayList&lt;&gt;();for (Warehouse warehouse : warehouses) &#123; WarehouseVo vo = new WarehouseVo(); BeanUtils.copyProperties(warehouse, vo); warehouseVos.add(vo);&#125; 4、Java代码注释TODO FIXME XXX的意义TODO: 说明： 如果代码中有该标识，说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明，表示需要实现，但目前还未实现的功能。 FIXME: 说明： 如果代码中有该标识，说明标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明。代码是错误的，不能工作，需要修复 XXX: 说明： 如果代码中有该标识，说明标识处代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。勉强可以工作，但是性能差等原因 使用了上方注解之后可以在IDEA中快速查看到标记的代码位置。 6、sql优化的几种方式 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引 .应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： 1select id from t where num is null 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： 1select id from t where num=0 应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描 对于连续的数值，能用 between 就不要用 in 了： 1select id from t where num between 1 and 3 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如： 1select id from t where num/2=100 应改为: 1select id from t where num=100*2 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如： 1-- name以abc开头的idselect id from t where substring(name,1,3)=&#x27;abc&#x27; 应改为: 1select id from t where name like &#x27;abc%&#x27; 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex 中的 male 、 female 几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，索引最好不要超过6个 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销 尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些 7、update更新两个表格内容12345678910111213141516171819-- 查看需要修改的条目信息SELECT a.locationCode, a.locationName AS &#x27;发货单&#x27;, b.locationName AS &#x27;原库位&#x27; FROM `t_purchase_order_receipt` a JOIN `t_warehouse_position` b ON a.locationName &lt;&gt; b.locationNameWHERE a.locationCode = b.locationCode;-- 执行更改UPDATE `t_purchase_order_receipt` a,`t_warehouse_position` b SET a.locationName = b.locationName WHERE a.locationCode = b.locationCode AND a.locationName &lt;&gt; b.locationName; 8、自定义拦截器 用于拦截未登录或授权的用户 123456789101112131415161718192021222324252627282930313233/*** 1、继承 HandlerInterceptorAdapter 抽象类* 2、重写方法：* preHandle：该方法将在Controller处理之前进行调用* postHandle: 它的执行时间是在处理器进行处理之后，也就是在Controller的方法调用之后执行* afterCompletion：该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行*/@Componentpublic class Test extends HandlerInterceptorAdapter &#123; public Test() &#123; super(); &#125; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; return super.preHandle(request, response, handler); &#125; @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123; super.postHandle(request, response, handler, modelAndView); &#125; @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123; super.afterCompletion(request, response, handler, ex); &#125; @Override public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; super.afterConcurrentHandlingStarted(request, response, handler); &#125;&#125; 9、Java中 :: 的作用 用来调用方法 Java 8 中我们可以通过 :: 关键字来访问类的构造方法，对象方法，静态方法 12345678910111213public class Test &#123; public static void printValur(String str) &#123; System.out.println(&quot;print value : &quot; + str); &#125; public static void main(String[] args) &#123; List&lt;String&gt; al = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;); al.forEach(Test::printValur); // 下面的方法和上面等价的 Consumer&lt;String&gt; methodParam = Test::printValur; // 方法参数 al.forEach(x -&gt; methodParam.accept(x));// 方法执行accept &#125;&#125; 10、匹配map的键123Optional&lt;String&gt; key = map.keySet().stream().filter(e -&gt; e.contains(&quot;退货&quot;)).findAny();String s = key.get();Object o = map.get(s); 11、Hutool 读取Excel文件 官方文档：https://hutool.cn/docs/#/poi/Excel%E5%B7%A5%E5%85%B7-ExcelUtil 123456// 加载Excel表格File file = FileUtil.file(&quot;C:\\\\Users\\\\12562\\\\Desktop\\\\退货数据批量导入模板.xlsx&quot;);FileInputStream fi1 = new FileInputStream(file);ExcelReader template = ExcelUtil.getReader(fi1, &quot;批量导入模板&quot;);// 读取内容List&lt;Map&lt;String, Object&gt;&gt; templateList = template.readAll(); 12、Stream()流的用法1234567891011121314151617181920212223242526// 将内容映射为 Map 的键值对List&lt;Map&lt;String, Object&gt;&gt; templateList;Map&lt;Pair&lt;Object, Object&gt;, Triple&lt;Object, Object, Object&gt;&gt; itemDict = itemList .stream() .collect(Collectors.toMap(e -&gt; new Pair&lt;&gt;(e.get(&quot;对照方案名称&quot;), e.get(&quot;品名（客户）&quot;)) , e -&gt; new Triple&lt;&gt;(e.get(&quot;料号（客户）&quot;), e.get(&quot;料号（PMS）&quot;), e.get(&quot;品名（PMS）&quot;))));// 获取内容List&lt;BatchRefundExcelDto&gt; refundList；for(BatchRefundExcelDto dto : refundList) &#123; Triple&lt;Object, Object, Object&gt; triple = itemDict.get(new Pair&lt;&gt;(dto.getControlScheme(), dto.getItemName())); if(triple != null) &#123; dto.setOutCode(String.valueOf(triple.getX())); dto.setSkuCode(String.valueOf(triple.getY())); dto.setSkuName(String.valueOf(triple.getZ())); &#125;&#125;// 按相同的值进行分组Map&lt;String, List&lt;BatchRefundExcelDto&gt;&gt; collect = refundList .stream() .collect(Collectors.groupingBy(BatchRefundExcelDto::getRefundId));// 匹配一个符合要求的键的值Optional&lt;String&gt; key = map.keySet().stream().filter(e -&gt; e.contains(&quot;xxx&quot;)).findAny();Object o = map.get(key); 13、根据文件名获取输入流1234567// 固有句式，后面可提升if (StringUtils.contains(fileName, &quot; &quot;) || StringUtils.isEmpty(fileName)) &#123; return BaseRet.createFailResult(10000, &quot;文件名称不合法&quot;);&#125;String url = qiniuClient.getPrivateFileUrl(fileName);InputStream inputStream = qiniuClient.getFileInputStream(url); 14、将输入流转为字节数组 因为使用Hutool工具类读取Excel后，会自动关闭输入流导致无法读取多个工作表 123456789// 复制输入流到字节输出流ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();IOUtils.copy(inputStream, byteArrayOutputStream);byte[] bytes = byteArrayOutputStream.toByteArray();// 将字节数组转为输入流ExcelReader template = ExcelUtil.getReader(new ByteArrayInputStream(bytes), &quot;批量导入模板&quot;);ExcelReader item = ExcelUtil.getReader(new ByteArrayInputStream(bytes), &quot;对照表管理（品名）&quot;);ExcelReader body = ExcelUtil.getReader(new ByteArrayInputStream(bytes), &quot;对照表管理（主体）&quot;); 15、进行Map表格映射并转为Bean 使用Hutool工具类的BeanUtil.toBean() 方法，使 原始Map 根据 映射Map 转换为 Bean，其中映射Map的键为原始Map的键，而值为Bean中的变量名 123456789101112131415// Person 类class Person &#123; private String name, private String age&#125;// 原始MapHashMap&lt;String, Object&gt; map = CollUtil.newHashMap();map.put(&quot;a_name&quot;, &quot;Joe&quot;);map.put(&quot;b_age&quot;, 12);// 映射Map：设置别名，用于对应bean的字段名HashMap&lt;String, String&gt; mapping = CollUtil.newHashMap();mapping.put(&quot;a_name&quot;, &quot;name&quot;);mapping.put(&quot;b_age&quot;, &quot;age&quot;);// 进行 toBean 转换Person person = BeanUtil.toBean(map, Person.class, CopyOptions.create().setFieldMapping(mapping)); 通过映射的方式，就不需要频繁使用 map.get 方法获取值并调用setXxx方法。 16、创建API文档的方式 在对应的控制层上方添加@Api注解 1@Api(tags = &#123;&quot;pc-退货处理&quot;&#125;) 在对应的接口上方添加@ApiOperation注解 12// value作为标签显示的内容，notes作为该Api的描述内容 @ApiOperation(value = &quot;批量导入退货单&quot;, notes = &quot;通过Excel批量导入退货单&quot;, httpMethod = &quot;POST&quot;) 效果如下： 17、输出日志信息1logger.info(&quot;BarLoadRelationshipWebService.importData &#123;&#125;&quot;, fileName); 18、获取当天时间1ConversionFunction.Date.formatDate(LocalDate.now()) 19、获取当前登录的用户信息1BizUser user = ThreadData.getUser(); 20、增加事务回滚 在对应的方法上面添加注解 1@Transactional(rollbackFor = Exception.class) 21、拼接字符串12// 例子String.format(&quot;料号【%s】不存在，请先补充或检查是否填写错误&quot;, barLoadRel.getMaterialCode()) 22、抛出异常1throw BaseRet.createFailResult(1111, errorList.toString()).toException(); 2、前端内容 SCSS的基本内容 Sass就是css的预处理器，Scss是Sass3版本中引入的新语法特性 vue中使用scss，安装： 1cnpm i -S node-sass sass-loader 使用方法： 12&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt; 支持定义变量，内容嵌套等内容 参考文章：https://blog.csdn.net/qq_40323256/article/details/109138173 中文文档：https://www.sass.hk/docs/ 切换分支 1git checkout [分支名] 4、工具类的说明1、类型转换 将字符串转为LocalDate类型，可以进行时间前后的判断 重量单位之间的转换 5、每周记录7M3W 入职办理——7月21日 熟悉场景和模式 配置电脑和开发环境 熟悉项目开发流程 7M4W 处理pms系统上的小问题 限制生产日期不得晚于今天，使用了LocalDate方法 1234LocalDate productTime = convertDate(item.getProductTime());if (productTime.isAfter(LocalDate.now())) &#123; return BaseRet.createFailResult(10000, &quot;生产日期不能晚于今天&quot;);&#125; 优化选择仓库和库位的时候忽略 有关PC仓 的内容 123List&lt;PositionConnect&gt; positionConnect = produceBiz.getPositionConnect() .stream().filter(e -&gt; e.getLocationCode().equals(locationCode) &amp;&amp; !e.getWarehouseName().contains(&quot;PC&quot;)).collect(Collectors.toList()); 隐藏原粮仓已停用的库位 提交代码到仓库，并使用base服务器进行测试 修复数据库中库位信息不对的问题 1234567-- 执行更改UPDATE `t_purchase_order_receipt` a,`t_warehouse_position` b SET a.locationName = b.locationName WHERE a.locationCode = b.locationCode AND a.locationName &lt;&gt; b.locationName; 完成退货单的批量导入 8M1W 完成退货单批量导入功能 SQL执行记录 1234# 库存管理-码板管理ALTER TABLE `pms`.`t_warehouse_bar_load_rel` ADD COLUMN `lastUpdateUin` int(11) NULL COMMENT &#x27;最近一次更新的uin&#x27; AFTER `updateTime`,ADD COLUMN `lastUpdateName` varchar(32) NULL COMMENT &#x27;最近一次更新的名字&#x27; AFTER `lastUpdateUin`; 查看日志","categories":[],"tags":[]},{"title":"test","slug":"test","date":"2021-08-05T08:35:42.463Z","updated":"2021-08-05T08:42:01.738Z","comments":true,"path":"2021/08/05/test/","link":"","permalink":"http://example.com/2021/08/05/test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-08-05T08:14:47.076Z","updated":"1985-10-26T08:15:00.000Z","comments":true,"path":"2021/08/05/hello-world/","link":"","permalink":"http://example.com/2021/08/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}